"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var path = require("path");
var fs = require("fs");
var setupUtils_1 = require("./setupUtils");
var setupExport = function (_a) {
    var workDir = _a.workDir, exportDir = _a.exportDir, mappings = _a.mappings;
    return __awaiter(void 0, void 0, void 0, function () {
        var ecsPath, dclIgnorePath, dclKernelPath, dclKernelDefaultProfilePath, dclKernelLoaderPath, dclKernelImagesDecentralandConnectPath, dclUnityRenderer, lambdasPath, explorePath, contractsPath, sceneContentPath, contentsContentPath, sceneJsonPath, defaultSceneJson, sceneJson, content, finalContent, ignoreFileContent, contentStatic, _i, _b, $, copyBrVersion, _c, copyBrVersion_1, fileName, err_1;
        var _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _e.trys.push([0, 19, , 20]);
                    ecsPath = path.dirname(require.resolve('decentraland-ecs/package.json', {
                        paths: [workDir, __dirname + '/../../', __dirname + '/../']
                    }));
                    dclIgnorePath = path.resolve(workDir, '.dclignore');
                    dclKernelPath = path.dirname(require.resolve('@dcl/kernel/package.json', { paths: [workDir, ecsPath] }));
                    dclKernelDefaultProfilePath = path.resolve(dclKernelPath, 'default-profile');
                    dclKernelLoaderPath = path.resolve(dclKernelPath, 'loader');
                    dclKernelImagesDecentralandConnectPath = path.resolve(dclKernelPath, 'images', 'decentraland-connect');
                    dclUnityRenderer = path.dirname(require.resolve('@dcl/unity-renderer/package.json', { paths: [workDir, ecsPath] }));
                    lambdasPath = path.resolve(exportDir, 'lambdas');
                    explorePath = path.resolve(lambdasPath, 'explore');
                    contractsPath = path.resolve(lambdasPath, 'contracts');
                    sceneContentPath = path.resolve(exportDir, 'content', 'entities');
                    contentsContentPath = path.resolve(exportDir, 'content', 'contents');
                    sceneJsonPath = path.resolve(workDir, './scene.json');
                    defaultSceneJson = { display: { title: '' }, scene: { parcels: ['0,0'] } };
                    sceneJson = fs.existsSync(sceneJsonPath)
                        ? JSON.parse(fs.readFileSync(sceneJsonPath).toString())
                        : defaultSceneJson;
                    return [4 /*yield*/, fs.promises.readFile(path.resolve(dclKernelPath, 'export.html'), 'utf-8')];
                case 1:
                    content = _e.sent();
                    finalContent = content.replace('{{ scene.display.title }}', sceneJson.display.title);
                    // 3) Copy and write files
                    return [4 /*yield*/, (0, setupUtils_1.ensureWriteFile)(path.resolve(explorePath, 'realms'), JSON.stringify([
                            {
                                serverName: 'localhost',
                                url: "http://localhost",
                                layer: 'stub',
                                usersCount: 0,
                                maxUsers: 100,
                                userParcels: []
                            }
                        ]))];
                case 2:
                    // 3) Copy and write files
                    _e.sent();
                    return [4 /*yield*/, (0, setupUtils_1.ensureWriteFile)(path.resolve(contractsPath, 'servers'), JSON.stringify([
                            {
                                address: "http://localhost",
                                owner: '0x0000000000000000000000000000000000000000',
                                id: '0x0000000000000000000000000000000000000000000000000000000000000000'
                            }
                        ]))];
                case 3:
                    _e.sent();
                    return [4 /*yield*/, (0, setupUtils_1.ensureWriteFile)(path.resolve(contractsPath, 'pois'), '')];
                case 4:
                    _e.sent();
                    return [4 /*yield*/, (0, setupUtils_1.ensureWriteFile)(path.resolve(sceneContentPath, 'scene'), JSON.stringify((0, setupUtils_1.getSceneJson)({
                            baseFolders: [workDir],
                            pointers: ((_d = sceneJson === null || sceneJson === void 0 ? void 0 : sceneJson.scene) === null || _d === void 0 ? void 0 : _d.parcels) || ['0,0'],
                            customHashMaker: setupUtils_1.shaHashMaker
                        })))];
                case 5:
                    _e.sent();
                    return [4 /*yield*/, (0, setupUtils_1.ensureWriteFile)(path.resolve(lambdasPath, 'profiles'), JSON.stringify([]))];
                case 6:
                    _e.sent();
                    ignoreFileContent = '';
                    if (fs.existsSync(dclIgnorePath)) {
                        ignoreFileContent = fs.readFileSync(path.resolve(workDir, '.dclignore'), 'utf-8');
                    }
                    contentStatic = (0, setupUtils_1.entityV3FromFolder)({
                        folder: workDir,
                        addOriginalPath: true,
                        ignorePattern: ignoreFileContent,
                        customHashMaker: setupUtils_1.shaHashMaker
                    });
                    if (!(contentStatic === null || contentStatic === void 0 ? void 0 : contentStatic.content)) return [3 /*break*/, 10];
                    _i = 0, _b = contentStatic === null || contentStatic === void 0 ? void 0 : contentStatic.content;
                    _e.label = 7;
                case 7:
                    if (!(_i < _b.length)) return [3 /*break*/, 10];
                    $ = _b[_i];
                    if (!($ && $.original_path)) return [3 /*break*/, 9];
                    return [4 /*yield*/, (0, setupUtils_1.ensureCopyFile)(path.resolve(workDir, $.original_path), path.resolve(contentsContentPath, $.hash))];
                case 8:
                    _e.sent();
                    _e.label = 9;
                case 9:
                    _i++;
                    return [3 /*break*/, 7];
                case 10: return [4 /*yield*/, Promise.all([
                        // copy project
                        (0, setupUtils_1.ensureWriteFile)(path.resolve(exportDir, 'index.html'), finalContent),
                        (0, setupUtils_1.ensureCopyFile)(path.resolve(dclKernelPath, 'index.js'), path.resolve(exportDir, 'index.js')),
                        (0, setupUtils_1.ensureCopyFile)(path.resolve(dclKernelPath, 'favicon.ico'), path.resolve(exportDir, 'favicon.ico')),
                        // copy dependencies
                        (0, setupUtils_1.copyDir)(dclUnityRenderer, path.resolve(exportDir, 'unity-renderer')),
                        (0, setupUtils_1.copyDir)(dclKernelDefaultProfilePath, path.resolve(exportDir, 'default-profile')),
                        (0, setupUtils_1.copyDir)(dclKernelLoaderPath, path.resolve(exportDir, 'loader'))
                    ])];
                case 11:
                    _e.sent();
                    if (!fs.existsSync(dclKernelImagesDecentralandConnectPath)) return [3 /*break*/, 13];
                    return [4 /*yield*/, (0, setupUtils_1.copyDir)(dclKernelImagesDecentralandConnectPath, path.resolve(exportDir, 'images', 'decentraland-connect'))];
                case 12:
                    _e.sent();
                    _e.label = 13;
                case 13:
                    copyBrVersion = ['unity.wasm', 'unity.data', 'unity.framework.js', 'unity.data'];
                    _c = 0, copyBrVersion_1 = copyBrVersion;
                    _e.label = 14;
                case 14:
                    if (!(_c < copyBrVersion_1.length)) return [3 /*break*/, 17];
                    fileName = copyBrVersion_1[_c];
                    if (!fs.existsSync(path.resolve(exportDir, 'unity-renderer', fileName))) return [3 /*break*/, 16];
                    return [4 /*yield*/, (0, setupUtils_1.ensureCopyFile)(path.resolve(exportDir, 'unity-renderer', fileName), path.resolve(exportDir, 'unity-renderer', fileName + ".br"))];
                case 15:
                    _e.sent();
                    _e.label = 16;
                case 16:
                    _c++;
                    return [3 /*break*/, 14];
                case 17: return [4 /*yield*/, copyWearables({ exportDir: exportDir })];
                case 18:
                    _e.sent();
                    return [3 /*break*/, 20];
                case 19:
                    err_1 = _e.sent();
                    console.error('Export failed.', err_1);
                    throw err_1;
                case 20: return [2 /*return*/];
            }
        });
    });
};
var copyWearables = function (_a) {
    var exportDir = _a.exportDir;
    return __awaiter(void 0, void 0, void 0, function () {
        var filesToDownload, wearableResponsePath, baseAvatarUrl, response, w_i, r_j, c_k, url, promises, _i, _b, fileUrl, url, filePath;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    filesToDownload = new Set();
                    wearableResponsePath = path.resolve(exportDir, 'lambdas', 'collections', 'wearables');
                    baseAvatarUrl = 'https://peer.decentraland.org/lambdas/collections/wearables?collectionId=urn:decentraland:off-chain:base-avatars';
                    return [4 /*yield*/, (0, setupUtils_1.ensureWriteFile)(wearableResponsePath, '')];
                case 1:
                    _c.sent();
                    return [4 /*yield*/, (0, setupUtils_1.downloadFile)(baseAvatarUrl, wearableResponsePath)];
                case 2:
                    _c.sent();
                    response = JSON.parse(fs.readFileSync(wearableResponsePath).toString());
                    for (w_i in response.wearables) {
                        // download wearable.thumbnail and copy and replace
                        filesToDownload.add("" + (response.wearables[w_i].thumbnail || ''));
                        response.wearables[w_i].thumbnail = '.' + new URL(response.wearables[w_i].thumbnail).pathname;
                        for (r_j in response.wearables[w_i].data.representations) {
                            // download each contents representation mainFile,
                            for (c_k in response.wearables[w_i].data.representations[r_j].contents) {
                                url = response.wearables[w_i].data.representations[r_j].contents[c_k].url;
                                filesToDownload.add("" + (url || ''));
                                response.wearables[w_i].data.representations[r_j].contents[c_k].url = '.' + new URL(url).pathname;
                            }
                        }
                    }
                    promises = [];
                    _i = 0, _b = Array.from(filesToDownload);
                    _c.label = 3;
                case 3:
                    if (!(_i < _b.length)) return [3 /*break*/, 6];
                    fileUrl = _b[_i];
                    url = new URL(fileUrl);
                    filePath = path.resolve(exportDir, url.pathname.substr(1));
                    return [4 /*yield*/, (0, setupUtils_1.ensureWriteFile)(filePath, '')];
                case 4:
                    _c.sent();
                    promises.push((0, setupUtils_1.downloadFile)(url.toString(), filePath));
                    _c.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 3];
                case 6: return [4 /*yield*/, Promise.all(promises)];
                case 7:
                    _c.sent();
                    return [4 /*yield*/, (0, setupUtils_1.ensureWriteFile)(wearableResponsePath, JSON.stringify(response, null, 2))];
                case 8:
                    _c.sent();
                    return [2 /*return*/];
            }
        });
    });
};
module.exports = setupExport;
